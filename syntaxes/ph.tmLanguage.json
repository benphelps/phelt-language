{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ph",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#statements"
    },
    {
      "include": "#callables"
    },
    {
      "include": "#ident"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#digits"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ph",
          "match": "\\b(if|else|while|for|return|and|or|break|continue|switch|case|default)\\b"
        },
        {
          "name": "constant.language.null.ph",
          "match": "\\b(nil)\\b"
        },
        {
          "name": "constant.language.boolean.ph",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "support.function.builtin.ph",
          "match": "\\b(print|println|dump)\\b"
        },
        {
          "name": "keyword.control.import.ph",
          "match": "\\b(import|module)\\b"
        },
        {
          "name": "variable.language.this.ph",
          "match": "\\b(this)\\b"
        },
        {
          "name": "variable.language.super.ph",
          "match": "\\b(super)\\b"
        },
        {
          "name": "storage.type.ph",
          "match": "\\b(init)\\b"
        },
        {
          "name": "keyword.operator.ph",
          "match": "\\+|-|\\*|/|%|\\^|&|\\||!|==|!=|<=|>=|<|>"
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "match": "(let)\\s(.*)=",
          "captures": {
            "1": {
              "name": "storage.type.ph"
            },
            "2": {
              "patterns": [
                {
                  "match": "([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]?)",
                  "captures": {
                    "1": {
                      "name": "variable.other.ph"
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "match": "\\b(fun)\\s+([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*)\\s*\\(([a-zA-Z0-9\\x{7f}-\\x{10ffff}_,\\s]*)\\)",
          "captures": {
            "1": {
              "name": "storage.type.function.ph"
            },
            "2": {
              "name": "entity.name.function.ph"
            },
            "3": {
              "patterns": [
                {
                  "match": "\\b[a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*\\b",
                  "name": "variable.parameter.ph"
                }
              ]
            }
          }
        },
        {
          "match": "\\b([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*)\\s*\\(([a-zA-Z0-9\\x{7f}-\\x{10ffff}_,\\s]*)\\)\\s*\\{",
          "captures": {
            "1": {
              "name": "entity.name.function.ph"
            },
            "2": {
              "patterns": [
                {
                  "match": "\\b[a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*\\b",
                  "name": "variable.parameter.ph"
                }
              ]
            }
          }
        },
        {
          "match": "\\b([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*)\\s*\\(([a-zA-Z0-9\\x{7f}-\\x{10ffff}_,\\s]*)\\)(.+);",
          "captures": {
            "1": {
              "name": "entity.name.function.ph"
            },
            "2": {
              "patterns": [
                {
                  "match": "\\b[a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*\\b",
                  "name": "variable.parameter.ph"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#keywords"
                },
                {
                  "include": "#statements"
                },
                {
                  "include": "#callables"
                },
                {
                  "include": "#ident"
                },
                {
                  "include": "#strings"
                },
                {
                  "include": "#digits"
                }
              ]
            }
          }
        },
        {
          "match": "\\b(class)\\s+([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*)(?:\\s*(<)\\s*([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.class.ph"
            },
            "2": {
              "name": "entity.name.type.class.ph"
            },
            "3": {
              "name": "storage.modifier.ph"
            },
            "4": {
              "name": "entity.name.type.class.ph"
            }
          }
        }
      ]
    },
    "callables": {
      "patterns": [
        {
          "match": "([a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*)\\((.*)\\);",
          "captures": {
            "1": {
              "name": "entity.name.function.ph"
            },
            "2": {
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#keywords"
                },
                {
                  "include": "#statements"
                },
                {
                  "include": "#callables"
                },
                {
                  "include": "#ident"
                },
                {
                  "include": "#strings"
                },
                {
                  "include": "#digits"
                }
              ]
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.unquoted.heredoc.ph",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.ph",
              "match": "\\\\(a|b|e|f|n|r|t|v|\\\\|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|x[0-9a-fA-F]{2,3}|[0-7]{1,3})"
            }
          ]
        },
        {
          "name": "string.quoted.double.ph",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ph",
              "match": "\\\\(a|b|e|f|n|r|t|v|\"|\\\\|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|x[0-9a-fA-F]{2,3}|[0-7]{1,3})"
            }
          ]
        },
        {
          "name": "string.quoted.single.ph",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ph",
              "match": "\\\\(a|b|e|f|n|r|t|v|'|\\\\|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|x[0-9a-fA-F]{2,3}|[0-7]{1,3})"
            }
          ]
        }
      ]
    },
    "digits": {
      "patterns": [
        {
          "name": "constant.numeric.ph",
          "match": "\\b[0-9]+(?:.[0-9]+)?\\b"
        }
      ]
    },
    "ident": {
      "patterns": [
        {
          "name": "variable.other.readwrite.ph",
          "match": "\\b[a-zA-Z\\x{7f}-\\x{10ffff}_][a-zA-Z0-9\\x{7f}-\\x{10ffff}_]*\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ph",
          "match": "\\/\\/.*"
        },
        {
          "name": "comment.block.ph",
          "begin": "\\/\\*",
          "end": "\\*\\/"
        }
      ]
    }
  },
  "scopeName": "source.ph"
}
